template functions:
	1. function specialization: When specializing a function template, its template arguments can be omitted if
							template argument deduction can provide them from the function arguments:
							template< typename T>
							void	function<T>(void); //generic form

							template<>
							void	function<int>(void);//specializing for int
	link to read: https://en.cppreference.com/w/cpp/language/template_specialization

	2. there is no difference between using <typename T> OR <class T>


difference between struct and class
	3.class and struct are almost the same in C++, the difference being the default access
	specifiers and inheritance, which are private for class and public for struct.
	So if a type has little need for private data members it may make more sense to implement
	it as a struct.

difference between deallocate and destroy:
	Destroying the individual elements ensures that their destructors are called and therefore
	they have a chance to free any resources they own. Simply deallocating the memory would not
	call the destructor of the object placed in that memory.

why Iterator trait is structure but reverse_iterator is a calss???
what is noexcept in some functions prototype??
what is the benefit of move_constructors?
what does auto type mean?
should I make the destructors of all my containers virtual???
use of explicit??


tester:
https://github.com/Mazoise/42TESTERS-CONTAINERS
https://github.com/mli42/containers_test


useful resources:
https://www.programiz.com/dsa/red-black-tree#:~:text=Left%20Rotate,arrangements%20on%20the%20left%20node.&text=If%20y%20has%20a%20left,the%20left%20subtree%20of%20y%20.&text=If%20the%20parent%20of%20x,the%20root%20of%20the%20tree.
https://daveparillo.github.io/cisc187-reader/trees/bst.html


understand the bugs:
	2. map: [] doesnt get assigned: fixed but dont know why the first method didnt work?

to do:
	4. map: remove std::cout << *ite when ite is an iterator
	5. vector & map: for operational comparison use std::equal
	6. map at function is since c++11?? do I need to remove it??
	7. clear function of map
	8. insert of vectors dont compile correctly

to write:
	4. for maps: insert (pos, value)


enable_if usage: iterators are address so they are integers. when you make template functions that are only
supposed to take iterators and nothing else you need to make sure that the argument given is an iterator and nothing else because
your function will break if something else is given.
so you use enable if with combination of if_integral to ensure the argument given is iterator and nothing else.
??what I dont understand is what if you give random number to the function instead of iterator??

Iterator_traits: you can use it as a base class for all your iterators. it is not mandatory tho!
