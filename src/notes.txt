template functions:
	1. function specialization: When specializing a function template, its template arguments can be omitted if
							template argument deduction can provide them from the function arguments:
							template< typename T>
							void	function<T>(void); //generic form

							template<>
							void	function<int>(void);//specializing for int
	link to read: https://en.cppreference.com/w/cpp/language/template_specialization

	2. there is no difference between using <typename T> OR <class T>


difference between struct and class
	3.class and struct are almost the same in C++, the difference being the default access
	specifiers and inheritance, which are private for class and public for struct.
	So if a type has little need for private data members it may make more sense to implement
	it as a struct.

why Iterator trait is structure but reverse_iterator is a calss???
what is noexcept in some functions prototype??
what is the benefit of move_constructors?
what does auto type mean?


tester:
https://github.com/Mazoise/42TESTERS-CONTAINERS
https://github.com/mli42/containers_test


useful resources:
https://www.programiz.com/dsa/red-black-tree#:~:text=Left%20Rotate,arrangements%20on%20the%20left%20node.&text=If%20y%20has%20a%20left,the%20left%20subtree%20of%20y%20.&text=If%20the%20parent%20of%20x,the%20root%20of%20the%20tree.
https://daveparillo.github.io/cisc187-reader/trees/bst.html


to do:

testings:
	map testing:
	2. [] doesnt get assigned
	3. make sure: the argument protection for the operator== != < again

to write:
	3. for vectors and stack: member access functions + emplace + emplace_back
	4. for maps: insert (pos, value)
